S13E14 Elixir Wizards Season Recap
===

​

Dan: Hey everyone. I'm Dan Ivovich, director of Engineering at SmartLogic. 

Charles: And I am Charles Suggs, software developer at SmartLogic.

Sundi: And I'm Sundi Myint, software engineering manager at Cars Commerce. 

Dan: Oh man, all three of us are back. But this time we are both your hosts and your panel for today's episode, because it's season 14, episode 13, and we're looking back at season 14 to discuss our highlights, key takeaways from the season, and just continuing to explore the wonderful place that is the Elixirverse.

We're all in the guest slash host seat. So why don't we just like, if anyone is hopefully not starting with this episode, we've got a, a glorious back catalog, but to get to know us a little bit more, why don't we just kind of go round the room? What are we focused on day to day these days, and what are we most excited about with programming?

Sundi? Why don't we start with you? 

Sundi: Sure. I think you could probably catalog my career on this podcast going back to before I even started at SmartLogic. So I've gone from like... software engineer new to Elixir, into learning more Elixir stuff into like engineering management. So now I'm an engineering manager at Cars, managed one and a half teams slash two teams and back to one team.

It's nice back to a normal, normal schedule. And what has been interesting for me, like an interesting challenge I think you hear the most in our SDUI episode from this past season. But I have been working on a team that is not only working in Elixir but surfacing mobile apps, engineering iOS apps, Android apps, and making sure that our features are developed to all three clients at the same time, which has been an interesting challenge.

It's not something I've had to solve before. Exactly. Not in terms of like feature development. It's been my current focus. It's been a huge challenge the last year of my life has been dedicated to this launch. And it has definitely colored the way I've thought about. You know, to LiveView or to not LiveView to Elixir or to not Elixir.

What other technologies could help in my pursuit of a faster, more strategic, more stable rollout. So I've listened to this season and talked through this season with that kind of lens. Charles, what about you? What's new With you?

Charles: Well, I started this world with being a co-owner of a worker-owned cooperative that was a software consultancy moving from WordPress websites to web applications to Elixir. And you know, each time it just gets better. I've been at SmartLogic now for shy of two years and I'm really excited to be in a position where I can really dig into Elixir wholeheartedly, learn a lot, and continue to apply those.

And currently, I'm in between some Elixir projects and thinking about how we can take what we've learned on the recent ones and turn those into wins on the next projects. And, perhaps, just make things more efficient each time. 

Dan: Cool. Yeah. That's funny. I, I wrote the what? Let's talk about what we do day to day. I have no idea what I do day to day. In my director role, it's a lot of strategy and operations and streamlining, and I think a lot about DevOps dev experience, dev learning, I help with sales quite a bit and what are we trying to take on and, and how do we best structure our team and ourselves to, to make those projects, you know, a great success.

Uh, and I've been working a lot with Charles and kind of what he mentioned in terms of, you know, how do we reapply some of our operational successes from existing projects and, and pull that knowledge into other places and establish a little bit more commonality, maybe across the board would be a way to put it so that we create some more repeatable things.

'cause we see some of the same problems over and over again. And we certainly try to have some consistency in how we deploy and manage infrastructure and things like that. So that's where I'm spending a lot of my time and I think that is fitting well. 'cause I'm very, you know, mostly excited about that experience and operational side of programming these days. So looking back then on this season , I maybe, probably unsurprisingly actually looking at the list, I think most of our favorite episodes were ones we were on. 'Cause we have a tendency to volunteer to host the ones that we like the most. My kind of top three favorites, Zig, because I love low level languages. I. love the, the NIF Bridge and like how to do that kind of stuff really Well. I, love Elixir, but you know, sometimes you, you need something else and I always find the ways to do that really interesting. And then because I'm a embedded hardware nerd, Blue Heron, and talking about Bluetooth and, and that stack and how that all works was certainly one of my favorites.

And then, I'll start to overlap here, I think with, with Charles, and just bring up data frames and Explorer and that, that type of work, because, more so than ever, I think everything we're doing is becoming about the data. and I think a lot of us like Elixir because it is so data focused.

It's about how the data flows through a system. And I think a lot of the stuff that's happening there with data frames and Explorer is really interesting. So as I've set up the first of your list, Charles, what were your other favorites from the season?

Charles: Well, I, you know, I do need to call out Explorer 'cause I really like working with data in our applications beyond just user generated data that might be a user's adding content to something. They're making notes about something, they're documenting something, and that's, that's fine. There's no problem with that.

But I like also working with a little bit more kind of, I guess you could call it hard data, I don't know. And in integrating that into applications, and been able to do that some with Explorer. Nix with Norbert or, or NobbZ, was exciting to me. And I, I run NixOS on my personal laptop and, have really been pleased with using Nix for setting up reproducible consistent development environments.

There's still plenty to learn there. We have occasionally run into some, some friction, but I think there's ways around that. Of course types set theoretic types when we had José on the, on the podcast. I think that's gonna be a nice improvement. I like the way that they're adding it into the compiler so that it doesn't force everyone to have to go and rewrite our applications just because we're updating Elixir and maintaining that backwards compatibility, but also we're all gonna benefit from those compile time checks, catching some more bugs for us, helping us to write better code. The, uh, Python interop with Victor Björklund was also really interesting. That's something I've done a little bit with previously and I think that there's a lot of opportunity there. Not because I think we need to use Python per se, but because it's such a huge community, a huge world, a lot of academia works with Python. There's a lot of scientific researchers that's, they primarily work with Python because there's so much tooling already existing around doing that kind of work. And so I think by getting better at how we integrate such tools with our Elixir applications can really broaden the the scope and the audience that Elixir is applicable to and what we can do with Elixir, even if some of that functionality may wind up in Elixir in the end, I think it's a really good partnership. And then, I thought LangChain with Mark Ericksen was pretty interesting. The smoothness that that can enable when you're integrating, various LLM APIs into your application and handling some of the... I don't know that boilerplate is the right word, but some of the kind of backend plumbing that you might have to build to handle multiple models and switching between them and having failovers. It's done a lot of that and enables a quicker start to jump into that kind of work. 

Sundi: Cool. I think when, when we talk about things that are our favorite episodes, it's like one of those things that's. Always gonna be personal because it means something to you because maybe you're working on something around it. And so one thing I was a little surprised on was like one of the things that, or one of the episodes that stuck out to me was when we talked to Sean about Nx and learned about the basics of machine learning.

When do you roll out your own model? When do you use something that pre-exists? That conversation came at a time where I was trying to learn more about that space in general and how my teams might be affected by potential machine learning projects in the future. And, as an engineering manager trying to look out for my team and understanding the body of work and having a good idea of how much work that might be, having that conversation with Sean around that time was actually a really great timing all around, which is kind of why I liked that episode. But for people who are also interested in learning more about that from like a, a high level version or a high level view, Sean did a really good job of breaking that down for people. So I really liked that. And then similarly of course, talking to Zack on server driven UI, as I said at the top of this episode was super cathartic a little bit, but also just like very fun to kind of go back and forth on what were the lessons learned from rolling out a brand new architecture. And I think especially for the season theme around into the Elixirverse, just like, what else in Elixir does it take to get something like that out there or in production?

It was really nice to show that, 'cause I think, especially when you're at ElixirConf or at at any conference based in Elixir... 'cause there are a lot of them these days there are even multiple happening at the same time this year. You get into like a bubble of Elixir is the solution for everything.

And as much as I'd love to believe that. We all know that there are gonna be some times where something else is gonna be the solution. And so running through what other options are and what are our alternatives to LiveView and Phoenix dead views and things like that were interesting conversations and frankly, hard ones to have.

So I really appreciated that conversation with Zack, for sure. And I know we did a little bit of a, a listener survey to see feedback, to see what people were saying in, in the wild, but also just feedback from my, my coworkers around like, yeah, I actually really enjoyed that conversation.

Like some people were even saying, oh, we should make this mandatory listening when you're onboarding into this new architecture. Go listen to the episode with Zack. So I, I felt very validated about that. So, uh, thanks Zach. Shout out to you, Zach, for that one. And then just in general, the Rustler episode was actually really nice for me as well because it, it felt like a, a good, well structured, good old like episode where we talk about, you know, start to finish.

What is this thing, Rustler, we don't know anything about it. We'd like to learn more about it. It just followed Sonny's career it was Sonny Scroggin, just following a career of somebody who's, who's done something for a very long time, and when is it appropriate to reach for it? When is it not? Again, just when you're weighing your options. I just appreciated that. We've gone, we've got off the rails with some episodes, no pun intended. But sorry, Dan. We've done some kind of, crazy formats on this show. And I really just liked going back to basics with that one. So Rustler was another favorite there. Yeah.

Dan: While I recover from the off the rails comment, um, as a, as a former or as a, as a shop, that still does a lot of rails. 

Charles: We were muted. You did not hear our laughter. 

Dan: Yeah. Uh, anyway, we did ask the audience kind of what some of their favorites were and, and types, Nx and, and Nix came up. I think NX and types are, are I think just like very popular, I would say in the community. Everyone's really well aware of what's going on in those spaces. Maybe types more so than Nx and, and certainly one of the, I think the beauties of how the type system's rolling out as we talked about during the episode is that you don't really need to know much about it.

It can kind of just like right now it's doing all the implicit checks that it can do and it only tells you if there's a problem and you don't need to think about it too much. But I was really happy to see Nix kind of come back into the conversation in the, in the listener feedback as well, because I do think it is a pretty powerful tool.

And I actually, I think the person that we, we heard it from actually is, is an agency employee similar to ours. And so like, you know that I have different environments that all need slightly different versions of things and how do I manage those just through a nice declarative.

I might be generous with the word nice, uh, declarative syntax, but, you know, a, a version controlled descriptor of what my environment needs to look like. I think the Nix conversation was, was really good. I know it's something that Charles and I have been really pushing and embracing and, and getting, in place in kind of our most modern approach for it across all of our projects.

And that's been repeatable and, and, and really useful and has made life better for those of us who have to manage lots of different environments on a single machine. So yeah, I think kind of leads me into just like some of my reflective thoughts on the, the season as a whole.

And I think dev experience that acronym or, you know, shortened DevXp type thing that you start to see more and more often these days. you know, and I think a language hitting a point where it is mature enough, to think about more and more and more about tooling, which is, I, I don't want to cut it short, right? Tooling in Elixir has always been great from the start mix and hex and, kind of the things that we can do for the tooling standpoint have been great from the very beginning. But as we start to see the need for things beyond just mix, whether that's additional environment through Nix, whether that's other compilers like Zig or Rust, and bringing those in and of course now we have the AI integration points, LangChain, you know, I mean, LangChain is all about developer experience. How do I work with multiple of these things with fallbacks and chaining them together and, and all of that? And, I am focused a lot on the operation of a team that is working towards being as productive as possible and having the tools get out of the way.

But also we see a growing need for more and more tools. And so I think that focus has been really interesting and I was glad to see it as a kind of a recurring thing across our episodes through the season. I have a few other thoughts, but I wanna kick the can around and not just hit all of mine right in a row.

So, Charles, you wanna share some things that, that were kind of takeaways for you for the season?

Charles: Building on the, the tooling, we have some really great tooling in the Elixir space. We've talked about that. If you've been to any Elixir conference you've certainly heard people talk about how great various bits of our tooling are, and it keeps improving. But at least in my observation, it feels like our language's adoption seems to be lagging in comparison to all the improvements that we're seeing in the tooling and what we can do.

And so I'm, I'm just looking forward to the continuing efforts that I know many in the community are making to increase adoption. It was certainly a, a topic of conversation in the hallway tracks at ElixirConf last year. I'm sure it will be this year, uh, 

Dan: I think 

Charles: it 

really kind of speaks to it. 

Dan: it is a challenge, right? Like when, when you're not the default, right? Either out of education or tutorials or what ChatGPT is spitting out to people to try. You have to fight the default and you can mostly, you know, you need to do that through creative marketing, community, community stories and also just like on merit, and I think on merit is where we certainly can show some advantages in just all the great things Elixir comes and, and brings and one thing I enjoyed about this season is that it doesn't have to be just Elixir, right?

You can, you can add Elixir and, and it'll work nice with the things you're already doing, and you won't be limited down the line when you need something else, because the integration points are numerous and effective and lots of people are working on them because we know that we have to, if we wanna make our Elixirverse bigger, we have to do that through playing nice. 

Charles: I I've seen recently, and I don't remember the name, there was some kind of a tool that was announced that would enable, basically enable embedding like a little elixir, for lack of better words, a piece of a web webpage or a web application. So this, it might be written in React or Vue or something, but you can embed this little bit of Elixir , right in the UI of that application.

Which seems like a nice way to start eating away at the JavaScript and replacing it. I had a founder recently say to me, talking about adoption that in his experience at least, and I don't know how widespread this is across founders, so this is one anecdote, in his experience, founders won't use Elixir unless someone really convinces them because there's the impression that they will never, or they will have a really hard time finding an Elixir developer or set of developers to work on that application for them. And there's a lot of pressure to just use what the most people are using. But also, I've talked with this founder and laid out some of the strong benefits of Elixir in the context of what he was trying to achieve.

And he was easily convinced looking at not just what I was telling him, but then going and looking at other materials and, and research to back up what I was saying and was like, oh yeah, this, this makes sense. This is the horse to ride to, to scale up and everything. So I'm gonna start here.

Dan: Yeah.

you gotta sell the merits, right? And I know a lot of people who are day-to-day writing languages that aren't necessarily their first choice because it's what their company has picked, right? So like you, if you hire people, they, they will write in what you need them to write it in. That is par for the course across the industry.

And I think that this idea that you can't find people is very pervasive, but I've never actually seen it play out for anybody. 

Sundi: Yeah, it's hiring, especially right now, I guess this is a pretty hot topic, has been very interesting and I think I've come kind of full circle on my like. Spirit, maybe spiritedness around hiring Elixir engineers because when I was hired in my first Elixir gig, I didn't know Elixir. They were fully confident that they could teach it to me and they did.

I was a React dev before that. Then, a few years in, I was like, we should only hire Elixir devs. We have an entire season of episodes where we talked about how it is not difficult to find engineering talent in the Elixir space. And I still think that's true. What I'm about to say does not kind of refute that.

But I also think I've come back around to, I really do appreciate engineers who are well-rounded, who are good at understanding not just the technical side of things, but business acumen, understanding what is important now versus later. I also like having people who are good at DevOps and understanding how to dig into something weird.

If CI is doing weird things, if your deploy pipeline has got some odd oddities, I don't necessarily want an Elixir expert. I want somebody who can generally figure things out. You know, it's like, I think we can teach Elixir to anybody. And so I'm like now a little bit less concerned with do they come from the Elixir community? Are they Elixir engineer or, you know, are they just a really great person, great engineer, who can figure these things out? So I've got, I've come full circle, so it's just a little bit of a whirlwind for me. But yeah, in the state of hiring right now, it's kind of a wild world out there. I mean, part of it is like AI is making it very difficult to hire.

And then Elixir engineers in general, I mean, there are so many of them, but also maybe not as many as we thought. I don't know. It's a, it's a weird, it's a weird environment. I don't know. Hiring in general has been a weird, weird place this summer. 

Dan: I think it's always weird to a degree, right? 

Sundi: Yeah. Different, different levels of weird.

Dan: yeah. Something that makes me think about one of my other kind of takeaways from the season of like, it's all about the data, right? And so if your product is truly focused on your business and like, hopefully it is, 'cause that's your differentiator and then it's about your data, the workflows around that data, the shape, the type, the structure, you know, and Elixir I think has a really. It has a good story to tell around kind of getting outta the way and letting that data flow to the best that it can. But it also doesn't necessarily have to be the solution for everything. I think it's a great solution for most things. But you have that integration point to do other things. And because of those integration points and because it's about the data, having a well-rounded team that has seen, seen lots of stuff regardless of where they've seen it, can be like such a huge asset.

And you know, one of the things I think pulls a lot of us to Elixir to start with, you know, especially those who came through the Ruby path, was like, this is a syntax that I actually like to look at and I enjoy spending my day looking at it. And so like, the biggest barrier, you know, is, is often just like knowing the ins and outs of the syntax and the standard library and those kinds of pieces because most languages are roughly gonna do things the same way, especially if you're hawking functional versus functional or object oriented versus object oriented.

And so, you know, I think the. The, Hey, I'm already friendly and approachable aspect to Elixir makes you want to learn more about it. I think is definitely an advantage of like helping you get your teams up to speed. And as we've seen across these 13 episodes, there's a lot of, a lot of great stuff happening in the, in the universe of Elixir, whether you're a, a new founder or an existing team that's looking to add, you know, solve some problems in maybe some, some new ways.

Elixir is a great way to do it. 

Yep. 

Charles: Friendly and approachable works for the people too when hiring.

Sundi: Mm-hmm. some of my overall thoughts from the season. I know there's some recency bias here, but, when we talked to Kimberly and Pei Pei around LoopedIn and we talked about vibe coding, this has definitely been top of mind for me again. Just like what is important to me right now as a, as a manager, as I'm trying to maintain code quality on my team, vibecoding is absolutely something that's atop of my mind.

You know, if you ever get feedback from, from people on your team, peers or reports or anything like that, and they're telling you, you know, I've got concerns about code quality because I feel like somebody just vibe coded this and we don't have proper feedback on this or a good PR feedback loop, that's always something that you're like, oh, okay.

I don't, this is a new world. I don't know how to, how to feel about this yet. So to hear from Kimberly about how vibecoding has really helped her process was actually really nice for me to hear how it really impacts somebody when they're trying to get their ideas out on the page.

And it, laid out a little bit of a foundation for how I think about that process. And it reminds me of, you know, what I have done in the past to help myself get unblocked in certain situations that definitely felt a little bit like a shortcut, but maybe weren't necessarily because I still had to be the one who made the call on what to push and not push.

so that was a really nice episode to, again, timely episode to have right now, summer of 2025, on, on vibe coding as a whole. I just really appreciated that conversation.

Dan: Yeah, certainly top of mind for, for a lot of people in terms of what this tool's gonna do for us in the long run, or in the short term even and how we're going to best embrace it and work it into our flows and a lot of ongoing conversations, a lot of good thoughts out there on terms of what works and what doesn't, and also quite a bit of a moving target in terms of what the best approach is, maybe today versus a handful of months ago, or a handful of months in the future but yeah, an interesting episode, one that the community really seemed to enjoy and, certainly something that is top of mind, I think across the industry. 

Sundi: Circling back to your thought earlier thoughts, Dan, you said you get a few more things, didn't wanna pile it all in at once.

Dan: Yeah, I think I was able to touch on most of it. I, I think from my standpoint, like. You know, we, we learn a lot from other languages. And so I think being able to see those things get pulled in, whether that's Zig or Rust or, the, I think Python version of LangChain, that's the original LangChain.

We take a lot of experience from that prior art and pull it into Elixir, either very directly through, hey, we're literally gonna compile and call this code or we're gonna be kind of inspired by that work so that we can have similar tooling available to us. Which is certainly an advantage if you were to bring somebody from another language over, but also just yeah, let's make sure those good ideas are, are shared and embraced so that we're able to work through those same problem sets with our preferred technology stack, our developer experience that is centered around Elixir rather than Python, but still able to leverage some of the good work that's happening in those communities.

And so I think that's, you know, to a degree, I think when we were planning out this season, what I was hoping we would get through, and I think here at the end, we were able to give a pretty good survey across that space of Elixir has its place among all of these peer languages and, and frameworks and infrastructure.

And you don't need to go all in on one or the other. But we definitely see the advantages of Elixir itself and what it can bring to the table. But it doesn't mean you need to necessarily throw away some of the work you've been doing in other stacks, and that doesn't necessarily have to mean, oh, I guess we have to go to microservices because we have different technology stacks.

There's other ways of solving those problems.

Sundi: Yeah, when I think about this past season, I, I often think of our seasons. A little bit like resources because people often ask me, I'm new to Elixir, or you know, I'm new to the Elixir ecosystem. I'd like to learn more about hiring in Elixir, or I'd like to know more about the origin story of Elixir.

It'll better frame my next conversation with a VP or something. I get that question a lot and sometimes I just point to our entire seasons because we theme them. With hiring, I'll point, I think usually back to adopting Elixir because we talk a lot there about how it doesn't matter if they know Elixir or don't, it's easy to hire in Elixir, which I, like I said earlier, still stand by.

I think this season I would point to this one resource wise as, when somebody is pitching Elixir to a company or a small group or whomever wants to write with it, that it is really versatile. I mean, we hit so many different industries, so many different types. small business, large business that are using Elixir or something Elixir adjacent.

And I just think that really proves the usefulness of Elixir and then also just like what kind of small built-ins you can do around it. it's a small tool that integrates with Elixir or if it's like just a full ecosystem that centers around Elixir. So that's definitely like, I'm already plugging that away in my brain as like, okay, this, this whole season is a resource for some future version of me that's gonna get asked this question, 

Dan: which 

Sundi: I do basically every time. 

Dan: Well, and I think something that's really nice too about how we've structured this, and I, I hope the audience agrees, is I think by taking the thematic approach rather than the like, okay, today is the 25th of August, 2025 and this is what is happening today. Yes, everything is obviously influenced by time, but I think we've created some more hopefully evergreen or at least ever green slash maybe only starting to brown ever so slightly around the edges, episodes and seasons that the back catalog is hopefully useful to those who are maybe newer to the space or coming in or just wanna like maybe take a, a, a nice survey of an idea across time.

it's great to have things clustered together. So yeah, certainly, opens up the question then of what's next. I guess we'll just like peek behind the curtain here, which is we don't have the exact theme worked out for the next season quite yet. I think we've been tossing around some ideas. Am I right?

Sundi: Yeah. So again, pulling the curtain a little, one thing that we love to do is we really love to engage with community around this time of year, we always have ElixirConf, we have Code Beam. There's a new one ExMex. Just really talking to people, seeing what they're building, what they're excited about, what, what they're building in the lobby at 11:00 PM at the hotel bar.

Looking at you, Zach, and Igniter. We know where these things were built. We were there when they happened. And so, really leaning into that. I know unfortunately we can't make it to ElixirConf this year, but I will be at Code Beam in Berlin and then I know some folks who are gonna be over in Austin with ExMex.

It should be a really interesting fall to see kind of what people are building and what they're interested in building. And then we really love to see from those events and experiences what is important to people. And then we kind of lean in there. So we're always trying to tune in, but we're always open to your feedback as well. I think we have that listener survey link in the show notes for folks if you have thoughts or if you already know what you want us to talk about next, we'll always listen to that.

Dan: Yeah, certainly reach out to any of us or Contact us through the, the website and we'd, love anyone's feedback on, on what they'd like us to kind of dig into because I think these thematic seasons where we try to go deep, but also wide on where can we stretch that? What can we align with that idea? Has been really beneficial to putting together a catalog of some interesting content.

And if it's not serving the community, then well. I mean, sure my vanity will enjoy it, but that's, uh, it, it'd be great to have more impact than that. 

Sundi: And, uh, if the last 13 episodes were not enough content for you. Season eight Elixir in a Polyglot Environment is another pretty similar theme, tangential theme to this concept of Elixirverse. What other languages play nice with Elixir? There are plenty more where that came from if you wanna take a look at some of our back catalog in that area.

Dan: Oh man. Now, now I wanna pitch a, uh, recap of the 14 Seasons episode where We say pick out favorite seasons, but I'm not prepared to have that conversation so we can table that idea, put a pin in that probably bad idea, for the future. But 

Charles: We will just read the summary from 

each episode 

Dan: R Right, 

right. If feed, feed multiple years into an AI and have it, tell me what, where was I?

Where did I sound the coolest? Um, so, you know, as we continue to kind of look back on the season, Sundi, Charles, anything else that you'd like to kind of share about your thoughts from season 14 of Elixir Wizards? 

Charles: I, I think kind of in a way, the theme is that Elixir doesn't exist in a vacuum or in isolation, right? We're part of a larger software community. And the more that we establish those bridges or maintain those bridges, it will mean greater adoption, more exposure to the language, more utility for the language.

And I think, you know, people will come up with new and interesting ways to use it that we haven't seen yet.

Sundi: I'm always surprised, but I'm always surprised that, I'm surprised at how vast you can get with Elixir like industry-wise, we've seen healthcare apps, we've seen hardware, you know, farming type things. We've seen travel industry, automotive industry, hotel industry. We've just, we've seen a lot.

Super Bowl video.

Dan: I would be pressed to think of an industry that it's not in.

Sundi: Yeah, very, very true. Which to me is almost like a litmus test of did we make it or not, you know?



Sundi: but it, it's nice to say, it's like, oh, Elixir is the go-to. you know, people might say Python's the go-to language for machine learning. And I'm sure people use it for other, we know people use it for other things, but I don't think anyone really says, oh, Elixir is the go-to language for X, Y, Z thing.

And I think that really hammered in this or that was really something that was obvious to me. This season now more than ever, for sure. 

Dan: It is just too good to be the go to thing for any one thing. That's really what it, Yeah. it's really, that's what I'm hearing, Sundi. 

Sundi: Cool. 

Charles: A Swiss Army knife without all the extra useless tools.

Dan: Right. 

Sundi: I, and that's the kind of the biggest thing is the bloatware that we're not including right.

Charles: Yeah, I love it.

Dan: Hey, if you, if you can, if you can get a small Linux Kernel and run it on a Raspberry Pi doing something right. Of course other languages have embedded versions too. But, yeah, definitely. It's been a lot of fun. Appreciate both of you. My, you know, co-hosts and you guys hosted a bunch of episodes and I dunno, it's, it's been great making this with you, with you both and, I think here as we kind of look to wrap if anyone's still listening to us talking at this point please, you know, send over ideas, thoughts for our next season. You know, our contact forms stay open. Our, plenty of ways to reach us through the SmartLogic website where the podcast listings are.

And, would love to hear any additional feedback or thoughts you have on the next season. I think we're, I'm not feeling burned out personally. So maybe we'll go right to thinking about what's next and putting together our theme to start pulling together more cool episodes for you.

There certainly remains to be a lot happening in the space. And as that can form into season long arcs for us, we will venture to pull some great minds together, get some great guests and bring you another great season of Elixir Wizards.

Sundi: See you all next time.

Charles: Thanks for listening. 

​ 

