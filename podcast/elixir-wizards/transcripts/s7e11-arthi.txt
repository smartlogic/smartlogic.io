EW S7E11 Transcript

SEASON 07 EPISODE 11

[EPISODE] 

[00:00:07] SM: Welcome to Elixir Wizards, a podcast brought to you by SmartLogic, a custom web and mobile development shop based in Baltimore. My name is Sundi Myint, and I'll be your host. I'm joined today by my co-host, Owen Bickford. Hey, Owen.

[00:00:19] OB: Hey, Sundi.

[00:00:21] SM: And my producer, Bonnie Lander. This season's theme is Impact of Elixir, and we're joined today by special guest, Arthi Radhakrishnan. Hi, Arthi. It’s so nice to have you back.

[00:00:31] AR: Thanks for having me here.

[00:00:34] SM: For the folks listening at home, Arthi came on a mini-feature just about a year ago. We are recording in January of 2022. Oh, my gosh. Happy New Year, everyone.

[00:00:44] AR: Happy New Year.

[00:00:45] OB: Happy New Year.

[00:00:45] AR: I can't believe it's actually 2022.

[00:00:47] SM: It's too many syllables, honestly. We can maybe just get right about this. I don't know about you, but I'm feeling 22. Let's go ahead into this. Arthi, you're joining us again. We might have touched on this before, but before people who maybe don't know you yet, do you want to tell us about what you're up to, what you're doing, what's new with you? Just who are you in a snapshot?

[00:01:14] AR: Who am I in a snapshot? Well, like Sundi said, my name is Arthi. Right now, I am a backend engineer at community.com. Community.com is a really cool place. We build a platform that facilitates more personalized texting between folks who have an audience and their audiences themselves. If you've ever seen anywhere on social media, where people are like, “Text me.” Oftentimes, that is community.com powering that text exchange. Yeah, I'm a backend engineer. I work on the Elixir stack out there. That's me in a nutshell.

[00:01:48] SM: When we talked to you before, you had been working in Elixir for about eight months or so. Now, it's been almost two years, right? Can I math right?

[00:01:56] AR: Almost. Not quite at that two-year mark, but we're quickly getting there. It's been a wild ride. It's been a journey for sure.

[00:02:04] SM: Yeah. We definitely want to talk about that journey. Owen, I want you to have a chance to ask any questions, but Aarthi, I'd also love to just hear about the whole journey. Where did you start? How did you get here?

[00:02:18] AR: Let's see. How did it all start? Where it all began, I guess. I actually grew up in the Bay Area. San Francisco, Bay Area. When I was growing up there, it was very different place. Suffice to say, I was surrounded by all sorts of tech. Silicon Valley was very different back then. There was no Twitter. There was no thing, companies, nothing quite like that. I think, I was always surrounded by technology.

It definitely bred in me a passion and interest in tech and grew up around computers, always was eager to play on my computer. That slowly evolved to building websites for different clubs and organizations in high school. From there, I went into computer science in college. I actually studied computer science at UC San Diego.

[00:03:07] OB: Which era of website building was this? Is this GeoCities, MySpace or –

[00:03:13] AR: Oh, yeah. Definitely GeoCities. Lots of fun with Dreamweaver, too, but GeoCities was GeoCities, and all of the cool additions to the GeoCities cursors that you could make.

[00:03:26] SM: Oh, my goodness. We shouldn't even be using millennial or Gen Z. We should be saying like, “I'm from the MySpace era. I'm from the GeoCities era.” Yeah, that's so fun. I feel like, we don't often – we hear so many stories about people who moved to the Bay Area to pursue their dreams in tech. Very few times have I talked to somebody who was raised in it. What was that like? I mean, you said you were surrounded by tech, but were there any special technology programs? Did you start really young?

[00:03:56] AR: Well, let me tell you. When I mean surrounded by tech, I legit mean surrounded by tech. When I was in elementary school, one of my elementary schools was in Cupertino, California, known for a little-known company called Apple. From the playground, where I would play on monkey bars and swing and stuff, you can see the white turrets of the one infinite loop Apple campus. It was really ubiquitous, truly everywhere.

[00:04:22] SM: You said the word turrets, like a castle.

[00:04:27] AR: That's how I envisioned it.

[00:04:30] SM: We have this thing in Maryland. It's often the beltway. I think, it's a Mormon church. Maybe I have that wrong. From the beltway, it looks like Disney World. As children, there's this running joke that you know you grew up in the DMV area if you recognize Epcot, or Disney World, but it's really just a church. It's really tall, but it's because it's on a hill. That's how I feel like, you had Apple is it looks like a castle to you.

[00:05:00] AR: To my little childhood self, playing on monkey bars, it for sure looks like a castle peeking out of the back of the playground.

[00:05:09] OB: Are you like, did you have ambitions to get to the castle someday? Or whether just something off in the distance?

[00:05:17] AR: You know what? I think, it was off in the distance, but this was actually the era of the candy-looking IMAX. Those were the computers that Apple so graciously donated to all of the little children at my school. Those were the computers that we got to use. They were really cool-looking computers. I do think that I had a lot of mental associations with those candy IMAX and thinking that they were so cool, and thinking that someday it would be cool to work on those cool-looking computers more.

[00:05:51] OB: I remember those, too. Those were fun to look at. I grew up in a place very far away from Silicon Valley. They were special. You had to have permission and supervision to be able to touch the computer in the early days.

[00:06:07] SM: You're surrounded by candy computers. When is the first time that you actually wrote some code?

[00:06:14] AR: Definitely some time when I was building my GeoCities pages, some casual HTML marquees everywhere. Classic.

[00:06:23] SM: Marquees. I’m not even – what do they call now? Carousels? You’re talking marquees.

[00:06:26] AR: Yeah, carousels. Carousels didn’t exist. No, but truth be told, I think that it was a very slow build, too, because my understanding of computers from building websites for, I don't know, for my little clubs and stuff in high school was vastly different than what I then experienced going into college and studying computer science. Like I said, I went to school in San Diego. The engineering department, or the computer science department in particular at UCSD was heavily funded by Qualcomm. That was one of the bigger tech companies there.

Qualcomm, of course, builds very specific types of devices and had, I think, their own agenda, too. A lot of my computer science education tended to be really low-level, too. Our big equivalent of a senior design project was that we had to build a compiler. That's not anything that I think, either I thought of when I was playing with my GeoCities websites, or even anything that I feel has been super relevant to my career and to my work life. It lies somewhere in between those renditions of my past and present.

[00:07:47] SM: That's very interesting. What was the first language you say you properly studied was?

[00:07:53] AR: Yeah. First language was Java. All of my core computer science fundamentals, everything I learned for a long time, the way I thought about for loops, everything was Java. Java was a big foundational piece of every part of my computer science education, and even into my first couple of jobs as well. Lots of Java. Along with that, lots of object-oriented programming. In fact, that's how my computer science curriculum was all structured as well. A heavy, heavy focus on object-oriented programming, on all of those fundamentals. That was a huge, huge foundation there.

[00:08:34] OB: Do you remember something that helped you – something that clicked, whenever you were making the transition from HTML, GeoCities pages to managing data and objects and things like that?

[00:08:47] AR: Yeah. I'll tell you, one of our big classes that I still actually think about now a lot today was one of my biggest core CS classes in the first few years was about data structures. Of course, data structures in Java, mean something different than they do to me now in my Elixir life. Data structures in Java also came along with a lot of algorithms work as well. With the way that our curriculum was structured, there was a lot of emphasis on very specific, very Java-based data structures. To your point about how I conceived of data and objects and stuff, I think a lot about that data structures class, because it was coming up with – or not just coming up with, but it was really having to understand and learn a lot of these really specific Java-based things.

Fast forward to my current life, and I work with lists and maps, and there's not a whole lot of the other stuff that comes into play as much. Of course, they're still highly relevant and I can find ways to conceive of what I do today with those, but OG data structures.

[00:10:02] SM: Yeah. What was that shift like? Object-oriented to functional. This is something we talk about on the show all the time, and I'd love to know what your experience was when you first encountered functional programming.

[00:10:13] AR: Boy, I think it was a doozy. I mean, I think still to this day, so I guess to add a little bit more color and tell you a little bit more about some of my experience and journey as well, coming out of college, I had a couple more jobs, where I was working primarily with Java. Then ultimately, shifted to Python, Ruby, and now Elixir. It's been quite a transition. Even when I think about so much of what I had done prior to my Elixir work, it was still with Rails, or with Django. Everything was still hugely object-oriented. That's been, I would say, the biggest transition by and far. Because it almost becomes a crutch that you rely upon. Especially with some of these frameworks, it becomes very easy to abuse a lot of the object-oriented manner of thinking. Shifting away from that, it takes conscientious efforts.

[00:11:10] SM: Owen, you went through a similar shift, right, in the different languages before you found Elixir?

[00:11:17] OB: I've been through a few shifts. Going back to the transition from GeoCities, purely hand-coding HTML, that mentality, to understanding data. I think, the first time I started to understand things a little bit better was tinkering with Jekyll, which is the static site generator for Rails. That was probably five, or six years ago, at least. Maybe 10 years ago by now. Playing with that, and then separating out.

If I want things to happen on the page that I didn't actually hard code, like trying to understand how to do that with data and APIs and stuff. Yeah, then years later, I started learning JavaScript. I was learning JavaScript around the time that it was like, they're the new functional programming push. I've really come up through functional programming first.

[00:12:14] SM: Yeah. I think, there was a podcast episode, not ours, The Ladybug Podcast, I think, they were talking about JavaScript, and is it object-oriented? Is it functional? I actually regret saying this now, because this is such a controversial subject.

[00:12:30] OB: It’s whatever you make it. It's pretty flexible.

[00:12:34] SM: Yeah. That was the TLDR of that episode was it's whatever you make it, and I really hadn't thought of it that way. I didn't think of my learning Java in college, and my currently working in Elixir, I didn't think about how different they are fundamentally. Arthi, you having gone through the shift yourself, it's actually really interesting to hear how you approached it. I guess, what – do you have preference? I feel like I know the answer, but I don't want to assume.

[00:13:02] AR: I really love Elixir. It's been a lot of fun to learn. I think, I'm still learning. I would by no means call myself near-expert level, or anything. I think, there's still so much for me to learn. I think, that's part of why I'm enjoying it so much, because it does feel like, there's a lot to learn. I'm enjoying the learning process. I think, I probably mentioned previously, I didn't know Elixir, prior to joining Community. Our tech stack, and everything that we're using at Community is very unique.

Learning new languages, while you're onboarding to a new job is also one hell of a way to learn. I think that in truth, aside from what I've just mentioned, all of my job experience had been, every time that I've learnt a new language, a new framework, everything has really been on the job. In some ways, that's me diving into the deep end for sure, and having to really catch up fairly quickly. Honestly, for me, that's been the best way that I have learned as well.

[00:14:07] OB: I second that. I've learned a lot of things, not just programming languages, but interacting with a lot of new types of infrastructure, just through work, Cloud Foundry, things like that. Yeah, it definitely forces you to – especially if you need to explain it to the rest of your team. If you're proposing something, or making a decision, then you've got to learn about this new concept, or this new domain and be able to communicate what you've learned to everyone else, and that's a challenge sometimes.

[00:14:38] AR: Right. It's also having to learn all of these things to build and to write production-ready code. I think that it can be one of the most compelling ways to learn. I think, I've also been pretty fortunate to find companies in environments and places where I've been permitted to learn on the job. In some cases, there was perhaps some – there has, of course, been some pre-existing knowledge that I've had going into some new language, or new framework. I think that I've been fortunate and lucky to be able to learn a lot on my jobs. For me, that has been paramount to my career and my successes here.

[00:15:22] SM: You mentioned before that you have had many different experiences. You've had multiple jobs before Community, and there are different kinds of work environments that are compelling to you. Can you dive into a little bit into that, into what you were just talking about?

[00:15:37] AR: Yeah, absolutely. I think, sometimes when we get into the nitty-gritty details of our technology careers, we forget that there's this huge human element and this huge element of how we work, who we work with, and the type of culture that exists at these companies. Those things for me, have tremendously shaped my jobs and my experiences.

We cannot overstate enough the importance of culture in our careers. Not just for the companies that we work at, but I think, also for the Elixir community as a whole. These cultures transcends just companies and play a big role in these communities, in the communities of languages and stuff as well.

[00:16:28] OB: This is maybe tangential, but I was watching The Matrix a couple of weeks ago, and you know how he goes into – like, he's getting reprimanded by his boss. It's this dark office building, everyone's wearing suits and ties, and everyone's super dressed up and everything. It's like, wow, we've come a long way in what? 20, 21 years, since this movie was made. It's like –

[00:16:49] SM: Oh, the first Matrix. You're talking about the original Matrix.

[00:16:51] OB: Yes. OG Matrix.

[00:16:52] SM: I was like, “Oh, are you about to do a spoiler alert on the podcast for the first time?” Because not everyone's seen the fourth one.

[00:16:59] OB: I mean, maybe spoiler alert. He gets to talk to his boss once. That's all I'm talking about. Even just aside, so he's a software developer. Obviously, offices, well, everything's changed now. Like you're saying, not just the software industry culture has changed, but I think, even corporate culture at large has changed a lot over the past two years, for sure, but even the past decade.

[00:17:22] AR: Yeah. We surely have pandemic to thank for some of the tremendous shifts in our collective cultures. Boy, I remember that scene exactly from The Matrix, and those cubicles. I want to tell you a little bit more about some of my actual summer internships in college, too. My first job out of college is actually at Red Hat. I was part of the consulting organization there. What we got to do was actually travel to all the best office parks, basically, in the world and build out great solutions, software solutions for folks. I'm being facetious with some of the best office parks piece, but there were some that had really distinct cubicles. Really gray. It was a combination of that Matrix scene and also, some scenes out of office space. Such a classic movie.

[00:18:14] SM: You're not saying that people were coming around the cubicles with the Matrixy guns coming at you.

[00:18:20] AR: No, just TPS reports.

[00:18:22] OB: Right. Some missing staplers.

[00:18:28] SM: Yeah. What about those other internships? You had a few, being able to get into the – break into the career.

[00:18:37] AR: Yeah. My summer internships in college tremendously shaped my entire vision of my job search, my career, everything that I really came to want out of my jobs as well. The two big summer internships that I had, could not be more different than one another. My first summer internship was at a super small startup at the time. I think, they've since gotten much bigger, but it was called Lumosity. They make these brain games.

At the time, they were games written in Flash, but it was a group of just 10 or so folks. It was in the Soma District of San Francisco, right across the street from Twitter, in the South Park area. I remember once going to get coffee, and there was a sign that I saw on a door and it was a fail well, because that was the Twitter office at the time. I just remember feeling so not only that, though, because it was that, juxtaposed with also the building I was in was shared with the Wired Magazine headquarters was on the top floor.

For me, as a really young student, to be able to be in San Francisco at this really pivotal time and experience so much of this was huge, so tremendous, and was very rejuvenating, inspiring and start juxtaposition from learning assembly and stuff in college. To be just in the thick of things was so exciting. That was actually my first experience in doing a lot more self-learning as well, because they had a Rails stack. They gave me a book at the beginning of my summer and said, “Learn some Rails.” I was like, “Okay, I guess so. I'll try.” I got to go through and build out a few small features here and there. When I think about it now, like well, how much autonomy they gave a student to be able to do stuff? It was an incredible experience.

[00:20:46] SM: Yeah. I just want you to think about for a second that you got paid to learn, which is the stark opposite from the rest of your – where you're going to school, you're paying to learn. I'd argue that the internship probably teaches you better than some of the stuff in universities these days.

[00:21:06] AR: Absolutely. Oh, my God. Absolutely.

[00:21:10] SM: I remember, I had my first summer internship, while some of my friends were taking CS classes over the summer. They were trying to make up for classes, or whatever the summer courses were. I was learning stuff and they were learning stuff. They were like, “Yeah, but the difference is you're getting paid, and I'm paying.”

[00:21:26] AR: Gosh, that's so true. I'll add though, I've been fortunate, I think, to find those spaces and carve out those spaces throughout my other jobs as well, to be able to learn while still delivering. Still, having time and space, having really just even the brain space to continue to do some learning at any job, I think, is so crucial, so paramount to any developer’s success as well. It's otherwise a real great recipe for burnout and disaster to just have folks need to do lots of learning outside of their jobs and outside of the time that they're getting paid. If companies can afford to have folks learn on the job, then you can probably pretty much bet that your employees and your bottom line are going to be a lot better off for it.

[00:22:17] SM: Yeah. Can you talk some about what that looks like for you on a daily basis, getting time to learn, how you balance that with any deliverables that you might have? I think, that's just something that a lot of people are trying to balance out now, especially New Year, new goals, new me?

[00:22:35] AR: Oh, yeah. New Year, new me. Actually, this is interesting. I was previously unfamiliar with advent of code, but more recently introduced to advent of code by some of my teammates. I'll admit that the month of December was really crazy busy for me, and so I didn't get to keep along as some of my teammates did. I have, of course, seeing that there is a nice, huge library of tons of different coding challenges to be able to. I don't even know how many years. I'd say, well, at least 10, if not more, right, years’ worth of different small challenges that you can embark upon to figure out and write solutions for. That's been super fun.

It's been a nice way to just try to find small times and spaces to just write something that will help me learn some – Not even just learn, but just also do some mind bendy puzzles that can help you figure out more. Just learn some.

[00:23:38] SM: Yeah. It's really cool that advent of code is the same question. People in every language tried to do it. Of course, they're posting their answers. It's interesting to see the same solution multiple ways, in multiple languages. That really broadens the way that you think about things. Granted, I looked at the first three days, and never again.

[00:23:59] AR: It's just such a hard month to do something like that in. You've got holidays, and end of the year things that you're trying to wrap up deadlines and stuff. It's just like, oh, that's the last thing on my list, but I really did try to follow it for this week.

[00:24:12] OB: Is it always December? I guess, I've been [inaudible 00:24:14].

[00:24:15] SM: Advent. Yeah.

[00:24:17] AR: It’s always December. Hot take here, I'm not going to do them in December. I'm going to do them all totally out of order in all sorts of weird years. Also, one of the things is also that they tend to be in different parts. I've realized that maybe I don't need to do the entire thing. Maybe I can just pick away at some part of it. I can use that as a really great learning experience for myself, too. It doesn't have to be the entire thing, and finding – I think, this is something that's been really helpful for me in learning. I don't have to learn to the A-plus level degree that in my head I think I do. I can just learn something, and something is going to be better than nothing.

[00:25:00] OB: You're going to be live streaming some advent code sessions?

[00:25:05] SM: Summer of code. Summer of code.

[00:25:06] AR: Yeah. Summer of code. Yeah. We'll see.

[00:25:12] SM: Because it’s Christmas in July. I like that.

[00:25:15] AR: I like that. Yeah.

[00:25:16] SM: Yeah. I took the same approach, Arthi, when I was looking at the stuff. I think, the first day I did actually try to solve the solution. But I was timeboxing myself, because I was like, you burn out so fast. Let's just give yourself 45 minutes to look at it. I got nowhere in the first 45 minutes. I felt so bad about myself. Then I was talking with some folks at the Elixir holiday party that we impromptu put together. They were like “Oh, yeah. I didn't finish that till 2 a.m.” Or, “Yeah, that took me three hours.” I was like “Oh, okay. I feel a little better now. It wasn't just me.”

Yeah, so I still try to learn something in the sense that I gave myself some time to think about the problem. I didn't just read the problem, read solutions. I did try to think about it a little bit, before going and seeing how different people approach the same problem. I felt like, I learned a lot from that. I think, yeah, something is better than nothing is a really good way to think about it.

[00:26:09] AR: Yeah. I mean, I think a lot of times, we can be really hard on ourselves for needing to learn to a certain degree, or perform to a certain degree, and using it as an opportunity to instead be a little bit more compassionate towards ourselves and finding. Honestly, this has been a probably lifelong practice, and something that has been a super transformative experience for me, figuring out how to be a little bit more compassionate to myself in my learning, or picking up new skills, or embarking on any new journey.

With advent of code, it's been super nice to try and probably, like you're alluding to, sometimes maybe fail by certain metrics that I have in my head, too. Maybe I'm able to think about some solution. Or maybe I'm not. And maybe I do need to go look at some other folks’ solutions. If I can figure out how to implement something, then that's still a win in my book.

[00:27:06] OB: I'm curious, so when you're done with advent of code for the year, you're picking up a new skill. Obviously, you’ve read a Rails book to get up to speed on that. What's your preference, if you're learning something new? Me, I start with video tutorials, or tours and that kind of thing, then I get into the docs, but everyone's different. I'm curious about your preferences.

[00:27:27] AR: Yeah. Empirically, I will sign up for tons of tutorials, buy lots of resources, and then flip through the first 10 pages of everything, and then not finish any of them. I really mean what I said very sincerely, about it being a transformative experience to learn how to be more compassionate to myself about different types of learnings. I think, coming from the way that I was taught and how my academic environment tended to be with school, it's been a necessity to figure out new ways of learning that I feel more appropriate for me.

I think, the one thing I will say is that my approach to learning has been constantly evolving. When I was 19 and in college, I could stay up until 3 a.m. with a Red Bull and cram. I cannot do that anymore. Because I cannot do that anymore, I've had to find new ways of learning. Again, this is why I really – I want to impart upon whoever is listening that I think it's okay to learn on the job. If that means reading StackOverflow and reading documentation on the job, while you're building out a solution, I think that's really great and really compelling.

You're using the tools at your disposal, distilling all of the tons of information that exists on the Internet to come up with the best solution for what you need to build. As engineers, we often want to build the very best solution and over-engineer and over-architect things. Sometimes it's really stepping away from all of that and figuring out okay, but real talk, what do I need to build right now for this particular thing? That's a skill that comes just with experience and time and figuring out, how do I take all of this information and really figure out what do I need right now?

[00:29:25] SM: Yeah, this is the exact energy we want to go into this year with. I'm here for it. Speaking of giving yourself space to learn and being compassionate to yourself, you also surround yourself by a really great team. You mentioned at the beginning, talking about having a good work environment, the ethos of a work environment that maybe gives you the space to learn. Can you speak to that a little more?

[00:29:46] AR: Yeah, absolutely. I feel really fortunate to – I think, I'm in a fortunate position right now. I can talk about this compassion that I'm trying to show myself and that I also intend to show my teammates and any other members in the community. I'm able to do that, because I'm in a work environment, where I feel – I'll tell you a few of the attributes that I feel I'm getting right now from my work environment that rejuvenate me, that I think we can try to embody more of, like you said, in this new year.

I feel like, my work environment is a very respectful one. I feel respected. I feel my teammates are very communicative and collaborative. For me, these are three huge, huge, huge things that are pillars of what builds us as a community, on a macro level, and on a micro level. These are huge, huge things that we cannot overemphasize. These are tremendous facets of what our jobs are, of what our careers are, of what being a programmer is.

[00:30:55] SM: Yeah. 100% agree. Owen and I actually got to meet a bunch of your co-workers at ElixirConf. We can confirm, Arthi is not just – I’m waving my hands around. I can’t think of a word. They are absolutely fun people. Would you like to hear a fun story involving your co-worker?

[00:31:11] AR: Oh, my gosh. Absolutely.

[00:31:13] SM: We were just hanging out in the lobby after one of the dinners and we're just chatting. Then Jeff, apparently, you guys have three Jeffs, but Jeff Smith, maybe. Yeah, okay. Comes downstairs, wearing a Psyduck sweater.

[00:31:29] AR: Psyduck.

[00:31:31] SM: My brain completely stopped working. I was like, “I want this sweater.” I bought that sweater, and now we are Psyduck sweater matching friends.

[00:31:44] AR: Another way to distinguish generations is, if someone can recognize one of the original 150, instead of, I don't know, whatever.

[00:31:52] SM: What number they're on now. Fourth –

[00:31:54] AR: Whatever weird number. This is a Pokemon reference, for those of you who are maybe not quite there.

[00:32:02] SM: Yes. Psyduck is a Pokemon. I mean, it's such a cute sweater. Psyduck is flat on his stomach, just in the way that he always is, looking confused. Butt up in the air. I mean, it was just so perfect. I love it. If that wasn't just like, I don't know. That just felt such a good indicator

of culture you have at Community. Not that we hadn't already known a little bit, but that was very fun, and I just wanted to relay that for everyone.

[00:32:30] AR: I love this.

[00:32:31] OB: Psyduck is always the star of the show when he makes an appearance. Sundi, yes.

[00:32:36] SM: Yes.

[00:32:38] AR: It wasn’t even my favorite Pokemon. Who’s your favorite Pokemon?

[00:32:42] SM: Ooh, hard questions, Arthi. Hard questions. I mean, I feel like, it was Eevee for a long time, just like the fox. I was thinking about this recently, actually. I feel like, it was probably more accurately, Mew, or Meowth. I do make the same face as Meowth. There's a GIF out there of Meowth being very excited. I had co-workers in a previous life who used that GIF to describe me about popcorn. I have a kinship to Meowth, too. What about you, favorite Pokemon?

[00:33:12] AR: Mine was Jigglypuff. I have no idea why. It was also my favorite thing to doodle. If I ever encounter old notebooks or whatever, there are just tons of Jigglypuffs everywhere, specifically the little curl on her forehead. I don’t know.

[00:33:35] SM: Yeah. Owen, you have one?

[00:33:36] OB: Well, so my interaction with Pokemon is limited to Smash Brothers, so Pikachu. People used to get so mad at me when I play Pikachu. It's just the most annoying thing to hear Pikachu scream for 15 minutes. That or Jigglypuff. Yeah. I loved it.

[00:33:55] SM: Well, we had to have somebody say.

[00:33:56] OB: A classic choice.

[00:33:57] SM: We had to have somebody say Pikachu, truly.

[00:34:00] AR: Truly, a classic choice. Yeah.

[00:34:01] SM: I'm glad that we got to this very important point on our agenda today.

[00:34:05] OB: Pika, pika, pika, pika. See you later.

[00:34:12] AR: I absolutely love this story, though, as a way to depict some of my teammates, as well, because I really appreciate and have a deep respect for a lot of my teammates. I mean, I think for me, one of the things about Community is that we have so many folks who are very involved in the community. One of the reasons that I was excited to learn Elixir at Community is because there are folks who are contributors to Elixir, like core contributors to Elixir. There's also folks who give lots of conference talks to author books about Elixir and to host conferences even, about Elixir. To me, it’s such a tremendous group of people to work alongside. Also, side note, very intimidating. They've been super approachable in any questions that I have ever had about anything.

Also, special shout out to three of the folks who really helped me learn Elixir when I first joined. My three first teammates were Joe Meriwether-Webb, Sebastian Avendano and Seve Salazar. Also, specific, shout out to Seve in particular. He really, really helped shape my view of Elixir and has been a continued mentor for me along the way. That's been huge to just have people who I know I can go to without –

[00:35:38] SM: Yeah, what does good mentorship look like to you? What is effective for you, as somebody who's learning something to have a mentor, who knows something about anything that you're trying to learn? What is a good learning technique for you when you're working with a mentor?

[00:35:52] AR: Hands down, my favorite way to learn anything is pair programming. I love pair programming. I love being able to step through code. I love being able to also sit on – I mean, obviously, now it's all Zoom screens, or whatever screen sharing, Internet things. I love being able to open a shell and be like, okay, but what if I did this? What if I did this? Then sometimes, there is someone on the other end, who can tell me specifically what's going on.

Honestly, that's been just the best way for me to have learned anything. I think, it takes a specific skill to pair well, and to also have the capacity to really explain. We just spent some time talking about what does it take to really be able to explain something new. You have to understand it. Then, if you can cultivate that type of relationship with someone where you can ask questions, they can explain, and then you can say like, “Okay, wait. Hold on. Let me just check that I'm understanding.” Repeat back to them. Boy, let me tell you, that's been great for me.

[00:36:59] OB: Yeah. I concur. High-five. Virtual pair high-five.

[00:37:05] SM: Our season theme is the impact that Elixir has on people, on communities, not community.com, but communities. I feel like, I always have to make this distinction when I'm talking to you guys. I was just thinking about how I'd love to follow up with what this impact has been for you. I also am thinking about the conversation we've had. I feel like, we've heard you talk a lot about what the impact has been. You have this really phenomenal outlook on learning, and you've learned a lot about yourself and how you prefer to grow. I feel like, you got a lot of that from Elixir. Is there anything else you want to add to that?

[00:37:44] AR: Yeah. I think, I landed in Elixir, and Elixir has been a major contributor in helping me shape and hone a lot of these ideas. I'll be frank with you, it's also come as a result of some, what, 10-plus years now I have experience, working in software and having to really pare down and distill so much different experiences and learning to figure out what works for me and what doesn't. Kudos to people who are able to get to this point in two years, or a year, or a month.

Honestly, I think that so much of where I've landed today is a reflection of years of very hard work, some successes, some failures, and really figuring out how to learn from so many different experiences as well.

[00:38:43] OB: How do you share the things you've learned? You're coming into a codebase that hasn't benefited, just hypothetically speaking, let's say you're working on some open-source project or something, and it hasn't seen the light with Elixir. You're like, “Oh, Elixir can fix all this.” How do you share the things you've learned, whether it's Elixir or just structure, or best practices with someone new?

[00:39:09] AR: I mean, I know if we're talking about open-source languages, maybe, or open-source libraries, this may not be as relevant. For me, again, I think that I would come back to pairing. I just think, having the forum and the ability to actually have a direct conversation and communication to express some ideas, or some learnings. Sure, stepping through code along with that. Being able to do that in a more face-to-face setting, even if it's just over the Internet is so tremendous, and has such a huge impact as well. I think, we all have so many ideas and it's in learning how to communicate these ideas and how to share them and what are the right forums for these ideas, and what are the right forums. Not just the right forums, or what are the right means to share certain ideas.

Of course, a lot of times, too, one of the things that I have appreciated about the Elixir community and about community.com as well is that oftentimes, things can be documented and written and then read as well. I think, again, that's a different, but very similar form of communication, where it's really putting pen to paper and writing certain ideas down. Whether it's in a written form, or in a spoken form, actually, the impact of words is tremendous in communicating ideas.

[00:40:35] SM: That's really cool to hear. I appreciate that you've gone through this journey. You're now in a position where you can speak about things that you've learned, so that hopefully, somebody who's coming in the future can maybe have an easier time of it. That's always a fun cycle for us to go through.

[00:40:53] AR: I hope so. I think, also, one of the things about this thing that we've all chosen to do is that it's constant learning. I think, it's really just constantly learning and constantly evolving how we learn and what we learn. I don't think that the learning stops. I don't think that the growing stops. I think it just keeps going and keeps changing and evolving.

[00:41:15] SM: Which is a perfect segue into my next question. How do you see Elixir changing and evolving and growing in the next five to 10 years? Where do you see that going?

[00:41:24] AR: I think, this has probably been echoed in so many conversations that we've all had before. Elixir has not tended to be anyone's first language. My wish for Elixir, my dream for Elixir is also that we can find collectively as a community, we can find ways to help introduce people to programming through Elixir.

One of the things that I had done in a pre-pandemic world when you could socialize a little bit more, was go to different meetups, like, there's Django Girls, or Rails Bridge. These are such compelling ways to help introduce people to not just a language, but to programming. I really hope and hope to see Elixir being one of those languages that can get people into programming. Because at the end of the day, if we're talking about a for loop, you can talk about a for loop in any language. It doesn't have to be some specific language. I think, there are so many ways that we've begun to in this world, really culturally shift, introducing people to programming, into programming concepts. I'm super stoked to see how we can begin to do that more with Elixir.

[00:42:36] SM: A bright future you've painted for us. I hope we get there.

[00:42:39] AR: New Year, new us.

[00:42:40] SM: Yeah, exactly. I like that. New Year, new us. I think that'll be our tagline. Great. Well, Arthi, I want to give you a chance to give any final plugs, or asks for the audience, your time to shine. Do you have anything you want to say to anyone? Where can people find you on socials if they want to reach out to you?

[00:42:57] AR: I'm not super big in social media land.

[00:43:01] SM: It’s all good.

[00:43:04] AR: I have my dark corners where I reside. No, I’m kidding. No. Really, have loved chatting with you. I'm really excited about seeing how the Elixir community grows, and hope to get more involved with some of the meetups, and some of the other things that are going on in this community. Looking forward to that bright future.

[00:43:25] SM: Awesome. Well, thank you, Arthi. This has been a blast. For all the meetup organizers out there who just heard Arthi volunteer herself for several meetups in the US, continental US, so excited for you all.

Yeah. That's it for this episode of Elixir Wizards. Thank you again to our guest, Arthi Radhakrishnan for joining us today. Elixir Wizards is a SmartLogic production. Today's host include myself, Sundi Myint, and my co-host, Owen Bickford. Our reducer is Bonnie Lander and our executive producer is Rose Burt.

Here at SmartLogic, we build custom web and mobile software. We're always looking to take on new projects. We work on Elixir, Rails, React, Kubernetes, and more. If you need a piece of custom software built, hit us up. Don't forget to like, subscribe and leave a review. Follow @smartlogic on Twitter for news and episode announcements. You can also join us on the Elixir Wizards Discord. Just head on over to the podcast page to find the link. Don't forget to join us next week for more on the impact Elixir, the finale.

[END]
